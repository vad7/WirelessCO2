
WirelessCO2Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000af0  00000b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800062  00800062  00000b86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013df  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033e  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006af  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fa  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e78  00000000  00000000  00003246  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000040be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	17 c0       	rjmp	.+46     	; 0x30 <__ctors_end>
   2:	31 c0       	rjmp	.+98     	; 0x66 <__bad_interrupt>
   4:	30 c0       	rjmp	.+96     	; 0x66 <__bad_interrupt>
   6:	08 c2       	rjmp	.+1040   	; 0x418 <__vector_3>
   8:	57 c1       	rjmp	.+686    	; 0x2b8 <__vector_4>
   a:	2d c0       	rjmp	.+90     	; 0x66 <__bad_interrupt>
   c:	2c c0       	rjmp	.+88     	; 0x66 <__bad_interrupt>
   e:	2b c0       	rjmp	.+86     	; 0x66 <__bad_interrupt>
  10:	2a c0       	rjmp	.+84     	; 0x66 <__bad_interrupt>
  12:	29 c0       	rjmp	.+82     	; 0x66 <__bad_interrupt>
  14:	28 c0       	rjmp	.+80     	; 0x66 <__bad_interrupt>
  16:	af c1       	rjmp	.+862    	; 0x376 <__vector_11>
  18:	26 c0       	rjmp	.+76     	; 0x66 <__bad_interrupt>
  1a:	25 c0       	rjmp	.+74     	; 0x66 <__bad_interrupt>
  1c:	24 c0       	rjmp	.+72     	; 0x66 <__bad_interrupt>
  1e:	23 c0       	rjmp	.+70     	; 0x66 <__bad_interrupt>
  20:	22 c0       	rjmp	.+68     	; 0x66 <__bad_interrupt>

00000022 <NRF24_BASE_ADDR>:
  22:	c8 c8                                               ..

00000024 <NRF24_INIT_DATA>:
  24:	23 01 24 4f 26 07 21 01 22 01 31 04                 #.$O&.!.".1.

00000030 <__ctors_end>:
  30:	11 24       	eor	r1, r1
  32:	1f be       	out	0x3f, r1	; 63
  34:	cf e5       	ldi	r28, 0x5F	; 95
  36:	d1 e0       	ldi	r29, 0x01	; 1
  38:	de bf       	out	0x3e, r29	; 62
  3a:	cd bf       	out	0x3d, r28	; 61

0000003c <__do_copy_data>:
  3c:	10 e0       	ldi	r17, 0x00	; 0
  3e:	a0 e6       	ldi	r26, 0x60	; 96
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	e0 ef       	ldi	r30, 0xF0	; 240
  44:	fa e0       	ldi	r31, 0x0A	; 10
  46:	02 c0       	rjmp	.+4      	; 0x4c <__SREG__+0xd>
  48:	05 90       	lpm	r0, Z+
  4a:	0d 92       	st	X+, r0
  4c:	a2 36       	cpi	r26, 0x62	; 98
  4e:	b1 07       	cpc	r27, r17
  50:	d9 f7       	brne	.-10     	; 0x48 <__SREG__+0x9>

00000052 <__do_clear_bss>:
  52:	20 e0       	ldi	r18, 0x00	; 0
  54:	a2 e6       	ldi	r26, 0x62	; 98
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	01 c0       	rjmp	.+2      	; 0x5c <.do_clear_bss_start>

0000005a <.do_clear_bss_loop>:
  5a:	1d 92       	st	X+, r1

0000005c <.do_clear_bss_start>:
  5c:	ad 37       	cpi	r26, 0x7D	; 125
  5e:	b2 07       	cpc	r27, r18
  60:	e1 f7       	brne	.-8      	; 0x5a <.do_clear_bss_loop>
  62:	9e d2       	rcall	.+1340   	; 0x5a0 <main>
  64:	43 c5       	rjmp	.+2694   	; 0xaec <_exit>

00000066 <__bad_interrupt>:
  66:	cc cf       	rjmp	.-104    	; 0x0 <__vectors>

00000068 <EEPROM_read>:
	Delay100ms(20);
}

static uint8_t EEPROM_read(uint8_t ucAddress) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  68:	e1 99       	sbic	0x1c, 1	; 28
  6a:	fe cf       	rjmp	.-4      	; 0x68 <EEPROM_read>
	EEAR = ucAddress;
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	9f bb       	out	0x1f, r25	; 31
  70:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
  72:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
  74:	8d b3       	in	r24, 0x1d	; 29
}
  76:	08 95       	ret

00000078 <EEPROM_write>:
static void EEPROM_write(uint8_t ucAddress, uint8_t ucData) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  78:	e1 99       	sbic	0x1c, 1	; 28
  7a:	fe cf       	rjmp	.-4      	; 0x78 <EEPROM_write>
	cli();
  7c:	f8 94       	cli
	EECR = (0<<EEPM1)|(0<<EEPM0);
  7e:	1c ba       	out	0x1c, r1	; 28
	EEAR = ucAddress;
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	9f bb       	out	0x1f, r25	; 31
  84:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  86:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMPE); //(1<<EEMWE);
  88:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE); //(1<<EEWE);
  8a:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  8c:	78 94       	sei
  8e:	08 95       	ret

00000090 <Delay10us>:

#define FLAG_LowLight				0x01

#if(1)
void Delay10us(uint8_t ms) {
	while(ms-- > 0) _delay_us(10); //wdt_reset();
  90:	88 23       	and	r24, r24
  92:	31 f0       	breq	.+12     	; 0xa0 <Delay10us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	9a e1       	ldi	r25, 0x1A	; 26
  96:	9a 95       	dec	r25
  98:	f1 f7       	brne	.-4      	; 0x96 <Delay10us+0x6>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <Delay10us+0xc>
  9c:	81 50       	subi	r24, 0x01	; 1
  9e:	f8 cf       	rjmp	.-16     	; 0x90 <Delay10us>
}
  a0:	08 95       	ret

000000a2 <Delay100ms>:
	while(ms-- > 0) {
		_delay_ms(1); //wdt_reset();
	}
}
void Delay100ms(unsigned int ms) {
	while(ms-- > 0) {
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	59 f0       	breq	.+22     	; 0xbc <Delay100ms+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	30 e7       	ldi	r19, 0x70	; 112
  aa:	42 e0       	ldi	r20, 0x02	; 2
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <Delay100ms+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <Delay100ms+0x14>
  b6:	00 00       	nop
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f3 cf       	rjmp	.-26     	; 0xa2 <Delay100ms>
		_delay_ms(100); //wdt_reset();
	}
}
  bc:	08 95       	ret

000000be <FlashLED>:

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
	while (num-- > 0) {
  c8:	f8 2e       	mov	r15, r24
		LED1_OFF;
		Delay100ms(toff);
  ca:	06 2f       	mov	r16, r22
  cc:	10 e0       	ldi	r17, 0x00	; 0
		LED1_ON;
		Delay100ms(ton);
  ce:	c4 2f       	mov	r28, r20
  d0:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
		LED1_OFF;
  d2:	d9 98       	cbi	0x1b, 1	; 27
		_delay_ms(100); //wdt_reset();
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
  d4:	ff 20       	and	r15, r15
  d6:	39 f0       	breq	.+14     	; 0xe6 <FlashLED+0x28>
		LED1_OFF;
		Delay100ms(toff);
  d8:	c8 01       	movw	r24, r16
  da:	e3 df       	rcall	.-58     	; 0xa2 <Delay100ms>
		LED1_ON;
  dc:	d9 9a       	sbi	0x1b, 1	; 27
		Delay100ms(ton);
  de:	ce 01       	movw	r24, r28
  e0:	e0 df       	rcall	.-64     	; 0xa2 <Delay100ms>
  e2:	fa 94       	dec	r15
  e4:	f6 cf       	rjmp	.-20     	; 0xd2 <FlashLED+0x14>
	}
	LED1_OFF;
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	ff 90       	pop	r15
  f0:	08 95       	ret

000000f2 <SPI_WriteReadByte>:
	NRF24_CMD_W_REGISTER | NRF24_REG_RX_PW_P0,	NRF24_PAYLOAD_LEN
};
const uint8_t NRF24_BASE_ADDR[] PROGMEM = { 0xC8, 0xC8 }; // Address MSBs: 2..3

uint8_t SPI_WriteReadByte(uint8_t data) {
	USIDR = data;
  f2:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); // clear overflow flag
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	8e b9       	out	0x0e, r24	; 14
	do {
		USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
  f8:	8b e1       	ldi	r24, 0x1B	; 27
  fa:	8d b9       	out	0x0d, r24	; 13
	} while((USISR & (1<<USIOIF)) == 0);
  fc:	76 9b       	sbis	0x0e, 6	; 14
  fe:	fd cf       	rjmp	.-6      	; 0xfa <SPI_WriteReadByte+0x8>
	return USIDR;
 100:	8f b1       	in	r24, 0x0f	; 15
}
 102:	08 95       	ret

00000104 <NRF24_ReadArray>:
	NRF24_SET_CSN_HI;
	return result;
}

void NRF24_ReadArray(uint8_t cmd, uint8_t *array, uint8_t len)
{
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <NRF24_ReadArray+0xc>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 116:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 118:	69 83       	std	Y+1, r22	; 0x01
 11a:	7a 83       	std	Y+2, r23	; 0x02
 11c:	ea df       	rcall	.-44     	; 0xf2 <SPI_WriteReadByte>
	while(len-- > 0) *array++ = SPI_WriteReadByte(NRF24_CMD_NOP);
 11e:	69 81       	ldd	r22, Y+1	; 0x01
 120:	e6 2e       	mov	r14, r22
 122:	7a 81       	ldd	r23, Y+2	; 0x02
 124:	f7 2e       	mov	r15, r23
 126:	16 0f       	add	r17, r22
 128:	1e 15       	cp	r17, r14
 12a:	31 f0       	breq	.+12     	; 0x138 <NRF24_ReadArray+0x34>
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	e1 df       	rcall	.-62     	; 0xf2 <SPI_WriteReadByte>
 130:	f7 01       	movw	r30, r14
 132:	81 93       	st	Z+, r24
 134:	7f 01       	movw	r14, r30
 136:	f8 cf       	rjmp	.-16     	; 0x128 <NRF24_ReadArray+0x24>
	NRF24_SET_CSN_HI;
 138:	db 9a       	sbi	0x1b, 3	; 27
}
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	08 95       	ret

0000014a <NRF24_WriteByte>:

void NRF24_WriteByte(uint8_t cmd, uint8_t value)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	NRF24_SET_CSN_LOW;
 154:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 156:	69 83       	std	Y+1, r22	; 0x01
 158:	cc df       	rcall	.-104    	; 0xf2 <SPI_WriteReadByte>
	SPI_WriteReadByte(value);
 15a:	69 81       	ldd	r22, Y+1	; 0x01
 15c:	86 2f       	mov	r24, r22
 15e:	c9 df       	rcall	.-110    	; 0xf2 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 160:	db 9a       	sbi	0x1b, 3	; 27
}
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <NRF24_WriteArray>:

void NRF24_WriteArray(int8_t cmd, uint8_t *array, uint8_t len)
{
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <NRF24_WriteArray+0xc>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 17c:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 17e:	69 83       	std	Y+1, r22	; 0x01
 180:	7a 83       	std	Y+2, r23	; 0x02
 182:	b7 df       	rcall	.-146    	; 0xf2 <SPI_WriteReadByte>
	while(len-- > 0) SPI_WriteReadByte(*array++);
 184:	69 81       	ldd	r22, Y+1	; 0x01
 186:	e6 2e       	mov	r14, r22
 188:	7a 81       	ldd	r23, Y+2	; 0x02
 18a:	f7 2e       	mov	r15, r23
 18c:	16 0f       	add	r17, r22
 18e:	1e 15       	cp	r17, r14
 190:	29 f0       	breq	.+10     	; 0x19c <NRF24_WriteArray+0x32>
 192:	f7 01       	movw	r30, r14
 194:	81 91       	ld	r24, Z+
 196:	7f 01       	movw	r14, r30
 198:	ac df       	rcall	.-168    	; 0xf2 <SPI_WriteReadByte>
 19a:	f9 cf       	rjmp	.-14     	; 0x18e <NRF24_WriteArray+0x24>
	NRF24_SET_CSN_HI;
 19c:	db 9a       	sbi	0x1b, 3	; 27
}
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <NRF24_SendCommand>:

uint8_t NRF24_SendCommand(uint8_t cmd) // Send command & receive status
{
	NRF24_SET_CSN_LOW;
 1ae:	db 98       	cbi	0x1b, 3	; 27
	uint8_t result = SPI_WriteReadByte(cmd);
 1b0:	a0 df       	rcall	.-192    	; 0xf2 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 1b2:	db 9a       	sbi	0x1b, 3	; 27
	return result;
}
 1b4:	08 95       	ret

000001b6 <NRF24_SetMode>:

void NRF24_SetMode(uint8_t mode) // Set mode in CONFIG reg
{
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG | (1<<NRF24_BIT_PWR_UP) | mode);
 1ba:	68 2f       	mov	r22, r24
 1bc:	6e 60       	ori	r22, 0x0E	; 14
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	c4 df       	rcall	.-120    	; 0x14a <NRF24_WriteByte>
	if(mode & NRF24_ReceiveMode) { // Receive mode
 1c2:	c0 ff       	sbrs	r28, 0
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <NRF24_SetMode+0x18>
		//NRF24_SendCommand(NRF24_CMD_FLUSH_RX);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1c6:	60 e7       	ldi	r22, 0x70	; 112
 1c8:	87 e2       	ldi	r24, 0x27	; 39
 1ca:	bf df       	rcall	.-130    	; 0x14a <NRF24_WriteByte>
		NRF24_SET_CE_HI; // start receiving
 1cc:	da 9a       	sbi	0x1b, 2	; 27
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <NRF24_Receive>:

uint8_t NRF24_Receive(uint8_t *payload) // Receive in payload, return data pipe number + 1 if success
{
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
	uint8_t pipe = 0, st;
	if((st = NRF24_SendCommand(NRF24_CMD_NOP)) & (1<<NRF24_BIT_RX_DR))
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	e8 df       	rcall	.-48     	; 0x1ae <NRF24_SendCommand>
 1de:	18 2f       	mov	r17, r24
 1e0:	86 ff       	sbrs	r24, 6
 1e2:	0c c0       	rjmp	.+24     	; 0x1fc <NRF24_Receive+0x2a>
	{
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, payload, NRF24_PAYLOAD_LEN);
 1e4:	44 e0       	ldi	r20, 0x04	; 4
 1e6:	be 01       	movw	r22, r28
 1e8:	81 e6       	ldi	r24, 0x61	; 97
 1ea:	8c df       	rcall	.-232    	; 0x104 <NRF24_ReadArray>
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1ec:	60 e7       	ldi	r22, 0x70	; 112
 1ee:	87 e2       	ldi	r24, 0x27	; 39
 1f0:	ac df       	rcall	.-168    	; 0x14a <NRF24_WriteByte>
		pipe = ((st >> NRF24_BIT_RX_P_NO) & 0b111) + 1;
 1f2:	81 2f       	mov	r24, r17
 1f4:	86 95       	lsr	r24
 1f6:	87 70       	andi	r24, 0x07	; 7
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <NRF24_Receive+0x2c>
	}
}

uint8_t NRF24_Receive(uint8_t *payload) // Receive in payload, return data pipe number + 1 if success
{
	uint8_t pipe = 0, st;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, payload, NRF24_PAYLOAD_LEN);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
		pipe = ((st >> NRF24_BIT_RX_P_NO) & 0b111) + 1;
	}
	return pipe;
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	08 95       	ret

00000206 <NRF24_Transmit>:

uint8_t NRF24_Transmit(uint8_t *payload) // Transmit payload, return 0 if success, 1 - max retransmit count reached, 2 - module not response.
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
 20c:	81 ee       	ldi	r24, 0xE1	; 225
 20e:	cf df       	rcall	.-98     	; 0x1ae <NRF24_SendCommand>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 210:	60 e7       	ldi	r22, 0x70	; 112
 212:	87 e2       	ldi	r24, 0x27	; 39
 214:	9a df       	rcall	.-204    	; 0x14a <NRF24_WriteByte>
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, payload, NRF24_PAYLOAD_LEN);
 216:	44 e0       	ldi	r20, 0x04	; 4
 218:	be 01       	movw	r22, r28
 21a:	80 ea       	ldi	r24, 0xA0	; 160
 21c:	a6 df       	rcall	.-180    	; 0x16a <NRF24_WriteArray>
	NRF24_SET_CE_HI; // Start transmission
 21e:	da 9a       	sbi	0x1b, 2	; 27
 220:	cf ef       	ldi	r28, 0xFF	; 255
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
	{
		Delay10us(10);
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	35 df       	rcall	.-406    	; 0x90 <Delay10us>
		st = NRF24_SendCommand(NRF24_CMD_NOP);
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	c2 df       	rcall	.-124    	; 0x1ae <NRF24_SendCommand>
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
 22a:	98 2f       	mov	r25, r24
 22c:	90 73       	andi	r25, 0x30	; 48
 22e:	21 f4       	brne	.+8      	; 0x238 <NRF24_Transmit+0x32>
 230:	c1 50       	subi	r28, 0x01	; 1
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, payload, NRF24_PAYLOAD_LEN);
	NRF24_SET_CE_HI; // Start transmission
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 232:	b9 f7       	brne	.-18     	; 0x222 <NRF24_Transmit+0x1c>
	{
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	return i == 0 ? 2 : !(st & (1<<NRF24_BIT_TX_DS));
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	05 c0       	rjmp	.+10     	; 0x242 <NRF24_Transmit+0x3c>
 238:	85 fb       	bst	r24, 5
 23a:	88 27       	eor	r24, r24
 23c:	80 f9       	bld	r24, 0
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	89 27       	eor	r24, r25
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <NRF24_SetAddresses>:

uint8_t NRF24_SetAddresses(uint8_t addr_LSB) // Set addresses: NRF24_BASE_ADDR + addr_LSB, return 1 if success
{
 248:	cf 93       	push	r28
 24a:	c8 2f       	mov	r28, r24
	NRF24_Buffer[0] = addr_LSB;
 24c:	80 93 78 00 	sts	0x0078, r24
	memcpy_P(NRF24_Buffer + 1, NRF24_BASE_ADDR, sizeof(NRF24_BASE_ADDR)/sizeof(NRF24_BASE_ADDR[0]));
 250:	42 e0       	ldi	r20, 0x02	; 2
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	62 e2       	ldi	r22, 0x22	; 34
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	89 e7       	ldi	r24, 0x79	; 121
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	3e d4       	rcall	.+2172   	; 0xada <memcpy_P>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_RX_ADDR_P0, NRF24_Buffer, NRF24_ADDRESS_LEN);
 25e:	43 e0       	ldi	r20, 0x03	; 3
 260:	68 e7       	ldi	r22, 0x78	; 120
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	8a e2       	ldi	r24, 0x2A	; 42
 266:	81 df       	rcall	.-254    	; 0x16a <NRF24_WriteArray>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 268:	43 e0       	ldi	r20, 0x03	; 3
 26a:	68 e7       	ldi	r22, 0x78	; 120
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e3       	ldi	r24, 0x30	; 48
 270:	7c df       	rcall	.-264    	; 0x16a <NRF24_WriteArray>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 272:	43 e0       	ldi	r20, 0x03	; 3
 274:	68 e7       	ldi	r22, 0x78	; 120
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e1       	ldi	r24, 0x10	; 16
 27a:	44 df       	rcall	.-376    	; 0x104 <NRF24_ReadArray>
	return NRF24_Buffer[0] == addr_LSB;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 91 78 00 	lds	r25, 0x0078
 282:	9c 13       	cpse	r25, r28
 284:	80 e0       	ldi	r24, 0x00	; 0
}
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <NRF24_init>:
	NRF24_SET_CE_LOW;
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG); // Power down
}

void NRF24_init(uint8_t channel) // After init transmit must be delayed
{
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	18 2f       	mov	r17, r24
	NRF24_SET_CSN_HI;
 292:	db 9a       	sbi	0x1b, 3	; 27
 294:	c4 e2       	ldi	r28, 0x24	; 36
 296:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0, c, v;
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 298:	fe 01       	movw	r30, r28
 29a:	84 91       	lpm	r24, Z
 29c:	31 96       	adiw	r30, 0x01	; 1
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 29e:	64 91       	lpm	r22, Z
		NRF24_WriteByte(c, v); 
 2a0:	54 df       	rcall	.-344    	; 0x14a <NRF24_WriteByte>
 2a2:	22 96       	adiw	r28, 0x02	; 2
	} while(i < sizeof(NRF24_INIT_DATA));
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	c0 33       	cpi	r28, 0x30	; 48
 2a8:	df 07       	cpc	r29, r31
 2aa:	b1 f7       	brne	.-20     	; 0x298 <NRF24_init+0xe>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 2ac:	61 2f       	mov	r22, r17
 2ae:	85 e2       	ldi	r24, 0x25	; 37
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		NRF24_WriteByte(c, v); 
	} while(i < sizeof(NRF24_INIT_DATA));
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 2b6:	49 cf       	rjmp	.-366    	; 0x14a <NRF24_WriteByte>

000002b8 <__vector_4>:

#define SETUP_WATCHDOG WDTCSR = (1<<WDCE) | (1<<WDE); WDTCSR = (1<<WDE) | (1<<WDIE) | (0<<WDP3) | (0<<WDP2) | (1<<WDP1) | (1<<WDP0); //  Watchdog 0.125 s
uint8_t LED_Warning = 0, LED_WarningOnCnt = 0, LED_WarningOffCnt = 0;

ISR(WATCHDOG_vect)
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
	SETUP_WATCHDOG;
 2c6:	88 e1       	ldi	r24, 0x18	; 24
 2c8:	81 bd       	out	0x21, r24	; 33
 2ca:	8b e4       	ldi	r24, 0x4B	; 75
 2cc:	81 bd       	out	0x21, r24	; 33
	if(Timer) Timer--;
 2ce:	80 91 67 00 	lds	r24, 0x0067
 2d2:	88 23       	and	r24, r24
 2d4:	29 f0       	breq	.+10     	; 0x2e0 <__vector_4+0x28>
 2d6:	80 91 67 00 	lds	r24, 0x0067
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	80 93 67 00 	sts	0x0067, r24
	if(++TimerCnt30Sec == 240) { // 30 sec
 2e0:	80 91 66 00 	lds	r24, 0x0066
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 66 00 	sts	0x0066, r24
 2ea:	80 3f       	cpi	r24, 0xF0	; 240
 2ec:	49 f4       	brne	.+18     	; 0x300 <__vector_4+0x48>
		TimerCnt30Sec = 0;
 2ee:	10 92 66 00 	sts	0x0066, r1
		if(TimerLowLight < 255) TimerLowLight++;
 2f2:	80 91 60 00 	lds	r24, 0x0060
 2f6:	8f 3f       	cpi	r24, 0xFF	; 255
 2f8:	19 f0       	breq	.+6      	; 0x300 <__vector_4+0x48>
 2fa:	8f 5f       	subi	r24, 0xFF	; 255
 2fc:	80 93 60 00 	sts	0x0060, r24
	}
	if(FanSpeedOverrideTimer) if(--FanSpeedOverrideTimer == 0) FanSpeedOverride = 0;
 300:	80 91 6d 00 	lds	r24, 0x006D
 304:	90 91 6e 00 	lds	r25, 0x006E
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	49 f0       	breq	.+18     	; 0x31e <__vector_4+0x66>
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	90 93 6e 00 	sts	0x006E, r25
 312:	80 93 6d 00 	sts	0x006D, r24
 316:	89 2b       	or	r24, r25
 318:	11 f4       	brne	.+4      	; 0x31e <__vector_4+0x66>
 31a:	10 92 6f 00 	sts	0x006F, r1
	if(LED_WarningOnCnt) {
 31e:	80 91 63 00 	lds	r24, 0x0063
 322:	88 23       	and	r24, r24
 324:	39 f0       	breq	.+14     	; 0x334 <__vector_4+0x7c>
		LED1_ON;
 326:	d9 9a       	sbi	0x1b, 1	; 27
		LED_WarningOnCnt--;
 328:	80 91 63 00 	lds	r24, 0x0063
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	80 93 63 00 	sts	0x0063, r24
 332:	1a c0       	rjmp	.+52     	; 0x368 <__vector_4+0xb0>
	} else if(LED_WarningOffCnt) {
 334:	80 91 62 00 	lds	r24, 0x0062
 338:	88 23       	and	r24, r24
 33a:	29 f0       	breq	.+10     	; 0x346 <__vector_4+0x8e>
		LED1_OFF;
 33c:	d9 98       	cbi	0x1b, 1	; 27
		LED_WarningOffCnt--;
 33e:	80 91 62 00 	lds	r24, 0x0062
 342:	81 50       	subi	r24, 0x01	; 1
 344:	0f c0       	rjmp	.+30     	; 0x364 <__vector_4+0xac>
	} else if(LED_Warning) { // short flashes
 346:	80 91 64 00 	lds	r24, 0x0064
 34a:	88 23       	and	r24, r24
 34c:	69 f0       	breq	.+26     	; 0x368 <__vector_4+0xb0>
		LED_WarningOffCnt = 2;
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	90 93 62 00 	sts	0x0062, r25
		LED_WarningOnCnt = 2;
 354:	90 93 63 00 	sts	0x0063, r25
		if(--LED_Warning == 0) LED_WarningOffCnt = 15;
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	80 93 64 00 	sts	0x0064, r24
 35e:	81 11       	cpse	r24, r1
 360:	03 c0       	rjmp	.+6      	; 0x368 <__vector_4+0xb0>
 362:	8f e0       	ldi	r24, 0x0F	; 15
 364:	80 93 62 00 	sts	0x0062, r24
	}
}
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_11>:

#define HASH_UPDATE IRHash = (IRHash << 4) + IRHash + IRReadedByte // hash=hash*17+b (better: hash=hash*33+b)
//#define HASH_UPDATE IRHash = _crc_ccitt_update(IRHash, IRReadedByte)
ISR(TIM0_OVF_vect) // IR
{
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
	if(++IRSignalTimer == 0) { // overflow - command end
 38c:	80 91 6c 00 	lds	r24, 0x006C
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 6c 00 	sts	0x006C, r24
 396:	81 11       	cpse	r24, r1
 398:	34 c0       	rjmp	.+104    	; 0x402 <__vector_11+0x8c>
		if(IRReceived != IRIsCommandReceived) {
 39a:	80 91 6b 00 	lds	r24, 0x006B
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	81 f1       	breq	.+96     	; 0x402 <__vector_11+0x8c>
 3a2:	40 91 69 00 	lds	r20, 0x0069
			if(KEY1_PRESSING) { // key pressed
 3a6:	b2 99       	sbic	0x16, 2	; 22
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <__vector_11+0x44>
				if(Key1Pressed != 255) Key1Pressed++;
 3aa:	4f 3f       	cpi	r20, 0xFF	; 255
 3ac:	19 f0       	breq	.+6      	; 0x3b4 <__vector_11+0x3e>
 3ae:	4f 5f       	subi	r20, 0xFF	; 255
 3b0:	40 93 69 00 	sts	0x0069, r20
				IRReceived = 0;
 3b4:	10 92 6b 00 	sts	0x006B, r1
 3b8:	24 c0       	rjmp	.+72     	; 0x402 <__vector_11+0x8c>
			} else {
				if(IRReceived == 2 && IRHead) {
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	e1 f4       	brne	.+56     	; 0x3f6 <__vector_11+0x80>
 3be:	80 91 6a 00 	lds	r24, 0x006A
 3c2:	88 23       	and	r24, r24
 3c4:	c1 f0       	breq	.+48     	; 0x3f6 <__vector_11+0x80>
					IRReceived = IRIsCommandReceived; 
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	80 93 6b 00 	sts	0x006B, r24
					HASH_UPDATE;
 3cc:	20 91 74 00 	lds	r18, 0x0074
 3d0:	30 91 75 00 	lds	r19, 0x0075
 3d4:	c9 01       	movw	r24, r18
 3d6:	54 e0       	ldi	r21, 0x04	; 4
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	5a 95       	dec	r21
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <__vector_11+0x62>
 3e0:	50 91 77 00 	lds	r21, 0x0077
 3e4:	85 0f       	add	r24, r21
 3e6:	91 1d       	adc	r25, r1
 3e8:	82 0f       	add	r24, r18
 3ea:	93 1f       	adc	r25, r19
 3ec:	90 93 75 00 	sts	0x0075, r25
 3f0:	80 93 74 00 	sts	0x0074, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <__vector_11+0x84>
				} else IRReceived = 0;
 3f6:	10 92 6b 00 	sts	0x006B, r1
				if(Key1Pressed < KEY1_PressingTimeMin) Key1Pressed = 0;
 3fa:	4a 30       	cpi	r20, 0x0A	; 10
 3fc:	10 f4       	brcc	.+4      	; 0x402 <__vector_11+0x8c>
 3fe:	10 92 69 00 	sts	0x0069, r1
			}
		}
	}
}
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_3>:

ISR(PCINT1_vect) // IR
{
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
	uint8_t bit;
	if(IRReceived == 0) {
 42e:	80 91 6b 00 	lds	r24, 0x006B
 432:	81 11       	cpse	r24, r1
 434:	10 c0       	rjmp	.+32     	; 0x456 <__vector_3+0x3e>
		IRReceived = 1; // Start
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 6b 00 	sts	0x006B, r24
		IRSignalTimerLast = 0;
 43c:	10 92 7c 00 	sts	0x007C, r1
		IRArrayBit = 0;
 440:	10 92 72 00 	sts	0x0072, r1
		IRReadedByte = 0;
 444:	10 92 77 00 	sts	0x0077, r1
		IRHash = 5381; // hash init
 448:	85 e0       	ldi	r24, 0x05	; 5
 44a:	95 e1       	ldi	r25, 0x15	; 21
 44c:	90 93 75 00 	sts	0x0075, r25
 450:	80 93 74 00 	sts	0x0074, r24
		//IRHash = 0xFFFF; // crc init
		goto xEnd;
 454:	54 c0       	rjmp	.+168    	; 0x4fe <__vector_3+0xe6>
	} else if(IRReceived < IRIsCommandReceived) {
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	08 f0       	brcs	.+2      	; 0x45c <__vector_3+0x44>
 45a:	53 c0       	rjmp	.+166    	; 0x502 <__vector_3+0xea>
 45c:	40 91 6c 00 	lds	r20, 0x006C
		if(IRReceived == 1) { // Check first pulse width 
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	a1 f4       	brne	.+40     	; 0x48c <__vector_3+0x74>
			uint8_t head = IRSignalTimer / 8;
 464:	84 2f       	mov	r24, r20
 466:	86 95       	lsr	r24
 468:	86 95       	lsr	r24
 46a:	86 95       	lsr	r24
			if(head == IRHead) {
 46c:	90 91 6a 00 	lds	r25, 0x006A
 470:	89 17       	cp	r24, r25
 472:	31 f0       	breq	.+12     	; 0x480 <__vector_3+0x68>
				IRReceived = 2;
			} else if(SetupIR) {
 474:	90 91 68 00 	lds	r25, 0x0068
 478:	99 23       	and	r25, r25
 47a:	31 f0       	breq	.+12     	; 0x488 <__vector_3+0x70>
				IRHead = head;
 47c:	80 93 6a 00 	sts	0x006A, r24
				IRReceived = 2;
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	80 93 6b 00 	sts	0x006B, r24
 486:	02 c0       	rjmp	.+4      	; 0x48c <__vector_3+0x74>
			} else {
				IRReceived = 0;
 488:	10 92 6b 00 	sts	0x006B, r1
			}
		}
		if(IRSignalTimer > IRSignalTimerLast) // bit = a / b > 1.5
 48c:	80 91 7c 00 	lds	r24, 0x007C
 490:	84 17       	cp	r24, r20
 492:	30 f4       	brcc	.+12     	; 0x4a0 <__vector_3+0x88>
			bit = (uint8_t)(IRSignalTimer - IRSignalTimerLast) > IRSignalTimerLast / 2;
 494:	24 2f       	mov	r18, r20
 496:	28 1b       	sub	r18, r24
 498:	98 2f       	mov	r25, r24
 49a:	96 95       	lsr	r25
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <__vector_3+0x92>
		else
			bit = (uint8_t)(IRSignalTimerLast - IRSignalTimer) > IRSignalTimer / 2;
 4a0:	28 2f       	mov	r18, r24
 4a2:	24 1b       	sub	r18, r20
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	94 2f       	mov	r25, r20
 4a8:	96 95       	lsr	r25
 4aa:	92 17       	cp	r25, r18
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__vector_3+0x98>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
		IRReadedByte = (IRReadedByte << 1) | bit;
 4b0:	50 91 77 00 	lds	r21, 0x0077
 4b4:	55 0f       	add	r21, r21
 4b6:	58 2b       	or	r21, r24
 4b8:	50 93 77 00 	sts	0x0077, r21
		if(++IRArrayBit > 7) {
 4bc:	80 91 72 00 	lds	r24, 0x0072
 4c0:	8f 5f       	subi	r24, 0xFF	; 255
 4c2:	88 30       	cpi	r24, 0x08	; 8
 4c4:	18 f4       	brcc	.+6      	; 0x4cc <__vector_3+0xb4>
 4c6:	80 93 72 00 	sts	0x0072, r24
 4ca:	17 c0       	rjmp	.+46     	; 0x4fa <__vector_3+0xe2>
			IRArrayBit = 0;
 4cc:	10 92 72 00 	sts	0x0072, r1
			HASH_UPDATE;
 4d0:	20 91 74 00 	lds	r18, 0x0074
 4d4:	30 91 75 00 	lds	r19, 0x0075
 4d8:	c9 01       	movw	r24, r18
 4da:	82 95       	swap	r24
 4dc:	92 95       	swap	r25
 4de:	90 7f       	andi	r25, 0xF0	; 240
 4e0:	98 27       	eor	r25, r24
 4e2:	80 7f       	andi	r24, 0xF0	; 240
 4e4:	98 27       	eor	r25, r24
 4e6:	82 0f       	add	r24, r18
 4e8:	93 1f       	adc	r25, r19
 4ea:	85 0f       	add	r24, r21
 4ec:	91 1d       	adc	r25, r1
 4ee:	90 93 75 00 	sts	0x0075, r25
 4f2:	80 93 74 00 	sts	0x0074, r24
			IRReadedByte = 0;
 4f6:	10 92 77 00 	sts	0x0077, r1
		}
	IRSignalTimerLast = IRSignalTimer;
 4fa:	40 93 7c 00 	sts	0x007C, r20
xEnd:	IRSignalTimer = 0;
 4fe:	10 92 6c 00 	sts	0x006C, r1
	}
}
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <SetFanSpeed>:

void SetFanSpeed(uint8_t speed)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	c8 2f       	mov	r28, r24
	if(FanType == 0) { // PWM
 51e:	80 91 76 00 	lds	r24, 0x0076
 522:	81 11       	cpse	r24, r1
 524:	23 c0       	rjmp	.+70     	; 0x56c <SetFanSpeed+0x54>
//		FanPWM = speed * 8;
		if(EEPROM_read(EPROM_Speed_0_as_Off) == 1) {
 526:	8b e0       	ldi	r24, 0x0B	; 11
 528:	9f dd       	rcall	.-1218   	; 0x68 <EEPROM_read>
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	29 f4       	brne	.+10     	; 0x538 <SetFanSpeed+0x20>
			if(speed != 0) {
 52e:	cc 23       	and	r28, r28
 530:	11 f0       	breq	.+4      	; 0x536 <SetFanSpeed+0x1e>
				PWM_Fan_On;
 532:	c0 9a       	sbi	0x18, 0	; 24
 534:	01 c0       	rjmp	.+2      	; 0x538 <SetFanSpeed+0x20>
			} else {
				PWM_Fan_Off;
 536:	c0 98       	cbi	0x18, 0	; 24
			}
		}
		uint8_t zero = EEPROM_read(EPROM_PWM_Zero);
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	96 dd       	rcall	.-1236   	; 0x68 <EEPROM_read>
 53c:	d8 2f       	mov	r29, r24
		if(speed == FanSpeedMax) {
 53e:	80 91 71 00 	lds	r24, 0x0071
 542:	c8 13       	cpse	r28, r24
 544:	03 c0       	rjmp	.+6      	; 0x54c <SetFanSpeed+0x34>
			FanPWM = PWM_MAX;
 546:	82 e3       	ldi	r24, 0x32	; 50
 548:	8c bf       	out	0x3c, r24	; 60
 54a:	1b c0       	rjmp	.+54     	; 0x582 <SetFanSpeed+0x6a>
		} else {
			FanPWM = ((uint8_t)(EEPROM_read(EPROM_PWM_MAX_Minus_1) - zero)) * speed / (FanSpeedMax - 1) + zero;
 54c:	8e e0       	ldi	r24, 0x0E	; 14
 54e:	8c dd       	rcall	.-1256   	; 0x68 <EEPROM_read>
 550:	8d 1b       	sub	r24, r29
 552:	6c 2f       	mov	r22, r28
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	7c d2       	rcall	.+1272   	; 0xa52 <__mulhi3>
 55a:	60 91 71 00 	lds	r22, 0x0071
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	61 50       	subi	r22, 0x01	; 1
 562:	71 09       	sbc	r23, r1
 564:	93 d2       	rcall	.+1318   	; 0xa8c <__divmodhi4>
 566:	d6 0f       	add	r29, r22
 568:	dc bf       	out	0x3c, r29	; 60
 56a:	0b c0       	rjmp	.+22     	; 0x582 <SetFanSpeed+0x6a>
		}
	} else {
		if(speed > FanSpeedMax) speed = FanSpeedMax;
 56c:	80 91 71 00 	lds	r24, 0x0071
 570:	8c 17       	cp	r24, r28
 572:	08 f4       	brcc	.+2      	; 0x576 <SetFanSpeed+0x5e>
 574:	c8 2f       	mov	r28, r24
		FanSwitch_PORT = (FanSwitch_PORT & ~FanSwitch_Mask) | (speed & FanSwitch_Mask);
 576:	98 b3       	in	r25, 0x18	; 24
 578:	8c 2f       	mov	r24, r28
 57a:	83 70       	andi	r24, 0x03	; 3
 57c:	9c 7f       	andi	r25, 0xFC	; 252
 57e:	89 2b       	or	r24, r25
 580:	88 bb       	out	0x18, r24	; 24
	}
	LED_WarningOffCnt = 5;
 582:	85 e0       	ldi	r24, 0x05	; 5
 584:	80 93 62 00 	sts	0x0062, r24
	LED_Warning = (LED_mode & 0b001 ? speed : 0) + 1;
 588:	80 91 73 00 	lds	r24, 0x0073
 58c:	80 ff       	sbrs	r24, 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <SetFanSpeed+0x7c>
 590:	cf 5f       	subi	r28, 0xFF	; 255
 592:	01 c0       	rjmp	.+2      	; 0x596 <SetFanSpeed+0x7e>
 594:	c1 e0       	ldi	r28, 0x01	; 1
 596:	c0 93 64 00 	sts	0x0064, r28
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <main>:

int main(void)
{
	CLKPR = (1<<CLKPCE); CLKPR = (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0); // Clock prescaler division factor: 1
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	86 bd       	out	0x26, r24	; 38
 5a4:	16 bc       	out	0x26, r1	; 38
	MCUCR = (1<<SE) | (0<<SM1) | (0<<SM0); // Idle sleep enable
 5a6:	80 e2       	ldi	r24, 0x20	; 32
 5a8:	85 bf       	out	0x35, r24	; 53
	DDRA = LED1; // Out
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA0); // pullup not used pins
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	8b bb       	out	0x1b, r24	; 27
	NRF24_DDR |= NRF24_CE | NRF24_CSN | NRF24_SCK | NRF24_MOSI; // Out
 5b2:	8a b3       	in	r24, 0x1a	; 26
 5b4:	8c 63       	ori	r24, 0x3C	; 60
 5b6:	8a bb       	out	0x1a, r24	; 26
	// Timer 8 bit
	TCCR0A = (1<<WGM01) | (1<<WGM00);  // Timer0: Fast PWM OCRA
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	80 bf       	out	0x30, r24	; 48
	TCCR0B = (1<<WGM02) | (0 << CS02) | (1 << CS01) | (0 << CS00); // Timer0 prescaller: 8
 5bc:	8a e0       	ldi	r24, 0x0A	; 10
 5be:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= (1<<TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 5c0:	89 b7       	in	r24, 0x39	; 57
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	89 bf       	out	0x39, r24	; 57
	OCR0A = PWM_MAX; // OC0A - Fclk/(prescaller*(1+TOP)) 
 5c6:	82 e3       	ldi	r24, 0x32	; 50
 5c8:	86 bf       	out	0x36, r24	; 54
	OCR0B = 0; // Half Duty cycle ((TOP+1)/2-1)
 5ca:	1c be       	out	0x3c, r1	; 60
	// ADC
 	//ADMUX = (0<<REFS1) | (1<<MUX2)|(1<<MUX1)|(1<<MUX0); // ADC7 (PA7)
 	//ADCSRA = (1<<ADEN) | (0<<ADATE) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC enable, Free Running mode, Interrupt, ADC 128 divider
 	//ADCSRB = (1<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0); // ADC Left Adjust Result
	FanType = EEPROM_read(EPROM_FanType);
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	4c dd       	rcall	.-1384   	; 0x68 <EEPROM_read>
 5d0:	80 93 76 00 	sts	0x0076, r24
	if(FanType == 0xFF) {
 5d4:	8f 3f       	cpi	r24, 0xFF	; 255
 5d6:	31 f4       	brne	.+12     	; 0x5e4 <main+0x44>
		EEPROM_write(EPROM_OSCCAL, OSCCAL);
 5d8:	61 b7       	in	r22, 0x31	; 49
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	4d dd       	rcall	.-1382   	; 0x78 <EEPROM_write>
		EEPROM_write(EPROM_FanType, 0);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	4a dd       	rcall	.-1388   	; 0x78 <EEPROM_write>
	}
	OSCCAL = EEPROM_read(EPROM_OSCCAL);
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	40 dd       	rcall	.-1408   	; 0x68 <EEPROM_read>
 5e8:	81 bf       	out	0x31, r24	; 49
	FanSpeedMax = EEPROM_read(EPROM_FanSpeedMax);
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	3d dd       	rcall	.-1414   	; 0x68 <EEPROM_read>
 5ee:	80 93 71 00 	sts	0x0071, r24
	if(FanType == 0)
 5f2:	80 91 76 00 	lds	r24, 0x0076
 5f6:	81 11       	cpse	r24, r1
 5f8:	0f c0       	rjmp	.+30     	; 0x618 <main+0x78>
	{ // PWM
		DDRA |= (1<<PORTA7); // Out
 5fa:	d7 9a       	sbi	0x1a, 7	; 26
		if(EEPROM_read(EPROM_Speed_0_as_Off) == 1) {
 5fc:	8b e0       	ldi	r24, 0x0B	; 11
 5fe:	34 dd       	rcall	.-1432   	; 0x68 <EEPROM_read>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	19 f4       	brne	.+6      	; 0x60a <main+0x6a>
			DDRB |= PWM_Fan_Power;
 604:	b8 9a       	sbi	0x17, 0	; 23
			PORTB |= FanSwitch_Mask ^ PWM_Fan_Power; // pull up not used
 606:	c1 9a       	sbi	0x18, 1	; 24
 608:	03 c0       	rjmp	.+6      	; 0x610 <main+0x70>
		} else {
			PORTB |= FanSwitch_Mask; // pull up not used
 60a:	88 b3       	in	r24, 0x18	; 24
 60c:	83 60       	ori	r24, 0x03	; 3
 60e:	88 bb       	out	0x18, r24	; 24
		}
		TCCR0A |= (1<<COM0B1); // Start PWM out
 610:	80 b7       	in	r24, 0x30	; 48
 612:	80 62       	ori	r24, 0x20	; 32
 614:	80 bf       	out	0x30, r24	; 48
 616:	03 c0       	rjmp	.+6      	; 0x61e <main+0x7e>
	} else {
		PORTA |= (1<<PORTA7);  // pullup not used
 618:	df 9a       	sbi	0x1b, 7	; 27
		DDRB = FanSwitch_Mask;  // Out
 61a:	83 e0       	ldi	r24, 0x03	; 3
 61c:	87 bb       	out	0x17, r24	; 23
	}
	// Prepare for IR receiving
	GIMSK |= (1<<PCIE1); // Pin Change Interrupt Enable 1
 61e:	8b b7       	in	r24, 0x3b	; 59
 620:	80 62       	ori	r24, 0x20	; 32
 622:	8b bf       	out	0x3b, r24	; 59
	PCMSK1 |= (1<<PCINT10); // Pin Change Mask Register 0 - Keys
 624:	80 b5       	in	r24, 0x20	; 32
 626:	84 60       	ori	r24, 0x04	; 4
 628:	80 bd       	out	0x20, r24	; 32
	if(EEPROM_read(EPROM_IRReceiver)) { 
 62a:	83 e0       	ldi	r24, 0x03	; 3
 62c:	1d dd       	rcall	.-1478   	; 0x68 <EEPROM_read>
 62e:	88 23       	and	r24, r24
 630:	29 f0       	breq	.+10     	; 0x63c <main+0x9c>
		IRHead = EEPROM_read(EPROM_IRCommandHead); // must be != 0
 632:	80 e1       	ldi	r24, 0x10	; 16
 634:	19 dd       	rcall	.-1486   	; 0x68 <EEPROM_read>
 636:	80 93 6a 00 	sts	0x006A, r24
 63a:	01 c0       	rjmp	.+2      	; 0x63e <main+0x9e>
	} else {
		PORTB |= (1<<PORTB2); // pullup for Key1
 63c:	c2 9a       	sbi	0x18, 2	; 24
	}
	LED_mode = EEPROM_read(EPROM_LedMode);
 63e:	88 e0       	ldi	r24, 0x08	; 8
 640:	13 dd       	rcall	.-1498   	; 0x68 <EEPROM_read>
 642:	80 93 73 00 	sts	0x0073, r24
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
 646:	8a e0       	ldi	r24, 0x0A	; 10
 648:	0f dd       	rcall	.-1506   	; 0x68 <EEPROM_read>
 64a:	1f de       	rcall	.-962    	; 0x28a <NRF24_init>
	SETUP_WATCHDOG;
 64c:	88 e1       	ldi	r24, 0x18	; 24
 64e:	81 bd       	out	0x21, r24	; 33
 650:	8b e4       	ldi	r24, 0x4B	; 75
 652:	81 bd       	out	0x21, r24	; 33
	sei();
 654:	78 94       	sei
	SetFanSpeed(EEPROM_read(EPROM_FanSpeedInit));
 656:	87 e0       	ldi	r24, 0x07	; 7
 658:	07 dd       	rcall	.-1522   	; 0x68 <EEPROM_read>
 65a:	5e df       	rcall	.-324    	; 0x518 <SetFanSpeed>
					&& EEPROM_read(EPROM_IRCommandArray + i * sizeof(IRHash) + 1) == (uint8_t) (IRHash / 256))
				{
					if(i == IRKey_FanOverride) {
						if(Timer == 0) {
							if(FanSpeedOverride == 0) {
								Timer = 5; // 0.6 sec wait for the next pressing
 65c:	95 e0       	ldi	r25, 0x05	; 5
 65e:	d9 2e       	mov	r13, r25
							if(SetupIR < IRCommands) {
								SetupIR++;
xSetupIR:						FlashLED(7, 1, 1);
								Delay100ms(10);
								IRReceived = 0;
								Timer = 255;
 660:	ee 24       	eor	r14, r14
 662:	ea 94       	dec	r14
							if(FanSpeedOverride == 0) {
								Timer = 5; // 0.6 sec wait for the next pressing
								FanSpeedOverride = 1;
							} else FanSpeedOverride = 0;
							SetFanSpeed(FanSpeedOverride ? FanSpeedMax : FanSpeed);
							FanSpeedOverrideTimer = FanSpeedOverrideTimeOn;
 664:	c0 ee       	ldi	r28, 0xE0	; 224
 666:	db ea       	ldi	r29, 0xAB	; 171
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
	SETUP_WATCHDOG;
	sei();
	SetFanSpeed(EEPROM_read(EPROM_FanSpeedInit));
xStartReceiving:
	while(!NRF24_SetAddresses(EEPROM_read(EPROM_RFAddress))) {
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	fe dc       	rcall	.-1540   	; 0x68 <EEPROM_read>
 66c:	ed dd       	rcall	.-1062   	; 0x248 <NRF24_SetAddresses>
 66e:	81 11       	cpse	r24, r1
 670:	05 c0       	rjmp	.+10     	; 0x67c <main+0xdc>
		FlashLED(1, 50, 20);
 672:	44 e1       	ldi	r20, 0x14	; 20
 674:	62 e3       	ldi	r22, 0x32	; 50
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	22 dd       	rcall	.-1468   	; 0xbe <FlashLED>
 67a:	f6 cf       	rjmp	.-20     	; 0x668 <main+0xc8>
	}
	NRF24_SetMode(NRF24_ReceiveMode); // Receive mode
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	9b dd       	rcall	.-1226   	; 0x1b6 <NRF24_SetMode>
				{
					if(i == IRKey_FanOverride) {
						if(Timer == 0) {
							if(FanSpeedOverride == 0) {
								Timer = 5; // 0.6 sec wait for the next pressing
								FanSpeedOverride = 1;
 680:	01 e0       	ldi	r16, 0x01	; 1
	}
	NRF24_SetMode(NRF24_ReceiveMode); // Receive mode
	while(1)
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
 682:	88 95       	sleep
		if(IRReceived == IRIsCommandReceived)
 684:	80 91 6b 00 	lds	r24, 0x006B
 688:	83 30       	cpi	r24, 0x03	; 3
 68a:	09 f0       	breq	.+2      	; 0x68e <main+0xee>
 68c:	56 c0       	rjmp	.+172    	; 0x73a <main+0x19a>
 68e:	81 e1       	ldi	r24, 0x11	; 17
 690:	f8 2e       	mov	r15, r24
 692:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(uint8_t i = 0; i < IRCommands; i++) {
				if(EEPROM_read(EPROM_IRCommandArray + i * sizeof(IRHash)) == (uint8_t) (IRHash % 256) 
 694:	8f 2d       	mov	r24, r15
 696:	e8 dc       	rcall	.-1584   	; 0x68 <EEPROM_read>
 698:	90 91 74 00 	lds	r25, 0x0074
 69c:	89 13       	cpse	r24, r25
 69e:	45 c0       	rjmp	.+138    	; 0x72a <main+0x18a>
					&& EEPROM_read(EPROM_IRCommandArray + i * sizeof(IRHash) + 1) == (uint8_t) (IRHash / 256))
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	8f 0d       	add	r24, r15
 6a4:	e1 dc       	rcall	.-1598   	; 0x68 <EEPROM_read>
 6a6:	90 91 75 00 	lds	r25, 0x0075
 6aa:	89 13       	cpse	r24, r25
 6ac:	3e c0       	rjmp	.+124    	; 0x72a <main+0x18a>
				{
					if(i == IRKey_FanOverride) {
 6ae:	12 30       	cpi	r17, 0x02	; 2
 6b0:	29 f5       	brne	.+74     	; 0x6fc <main+0x15c>
						if(Timer == 0) {
 6b2:	80 91 67 00 	lds	r24, 0x0067
 6b6:	81 11       	cpse	r24, r1
 6b8:	1a c0       	rjmp	.+52     	; 0x6ee <main+0x14e>
							if(FanSpeedOverride == 0) {
 6ba:	80 91 6f 00 	lds	r24, 0x006F
 6be:	81 11       	cpse	r24, r1
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <main+0x12c>
								Timer = 5; // 0.6 sec wait for the next pressing
 6c2:	d0 92 67 00 	sts	0x0067, r13
								FanSpeedOverride = 1;
 6c6:	00 93 6f 00 	sts	0x006F, r16
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <main+0x130>
							} else FanSpeedOverride = 0;
 6cc:	10 92 6f 00 	sts	0x006F, r1
							SetFanSpeed(FanSpeedOverride ? FanSpeedMax : FanSpeed);
 6d0:	80 91 6f 00 	lds	r24, 0x006F
 6d4:	88 23       	and	r24, r24
 6d6:	19 f0       	breq	.+6      	; 0x6de <main+0x13e>
 6d8:	80 91 71 00 	lds	r24, 0x0071
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <main+0x142>
 6de:	80 91 70 00 	lds	r24, 0x0070
 6e2:	1a df       	rcall	.-460    	; 0x518 <SetFanSpeed>
							FanSpeedOverrideTimer = FanSpeedOverrideTimeOn;
 6e4:	d0 93 6e 00 	sts	0x006E, r29
 6e8:	c0 93 6d 00 	sts	0x006D, r28
 6ec:	24 c0       	rjmp	.+72     	; 0x736 <main+0x196>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6ee:	f8 94       	cli
						} else { // 
							ATOMIC_BLOCK(ATOMIC_FORCEON) FanSpeedOverrideTimer = 0;
 6f0:	10 92 6e 00 	sts	0x006E, r1
 6f4:	10 92 6d 00 	sts	0x006D, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6f8:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 6fa:	1d c0       	rjmp	.+58     	; 0x736 <main+0x196>
						}
					} else if(FanSpeedOverride) {
 6fc:	80 91 6f 00 	lds	r24, 0x006F
 700:	88 23       	and	r24, r24
 702:	c9 f0       	breq	.+50     	; 0x736 <main+0x196>
 704:	80 91 70 00 	lds	r24, 0x0070
						if(i == IRKey_Up) {
 708:	11 11       	cpse	r17, r1
 70a:	06 c0       	rjmp	.+12     	; 0x718 <main+0x178>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 70c:	90 91 71 00 	lds	r25, 0x0071
 710:	89 17       	cp	r24, r25
 712:	38 f4       	brcc	.+14     	; 0x722 <main+0x182>
 714:	8f 5f       	subi	r24, 0xFF	; 255
 716:	03 c0       	rjmp	.+6      	; 0x71e <main+0x17e>
						} else if(i == IRKey_Down) {
							if(FanSpeed > 0) FanSpeed--;
 718:	88 23       	and	r24, r24
 71a:	19 f0       	breq	.+6      	; 0x722 <main+0x182>
 71c:	81 50       	subi	r24, 0x01	; 1
 71e:	80 93 70 00 	sts	0x0070, r24
						}
						SetFanSpeed(FanSpeed);
 722:	80 91 70 00 	lds	r24, 0x0070
 726:	f8 de       	rcall	.-528    	; 0x518 <SetFanSpeed>
 728:	06 c0       	rjmp	.+12     	; 0x736 <main+0x196>
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
		if(IRReceived == IRIsCommandReceived)
		{
			for(uint8_t i = 0; i < IRCommands; i++) {
 72a:	1f 5f       	subi	r17, 0xFF	; 255
 72c:	f3 94       	inc	r15
 72e:	f3 94       	inc	r15
 730:	13 30       	cpi	r17, 0x03	; 3
 732:	09 f0       	breq	.+2      	; 0x736 <main+0x196>
 734:	af cf       	rjmp	.-162    	; 0x694 <main+0xf4>
						SetFanSpeed(FanSpeed);
					}
					break;
				}
			}
			IRReceived = 0;
 736:	10 92 6b 00 	sts	0x006B, r1
		}
		if(Key1Pressed == 255) // Press and hold key1 for ~3.2 sec - Change FanOfAtNight flag
 73a:	80 91 69 00 	lds	r24, 0x0069
 73e:	8f 3f       	cpi	r24, 0xFF	; 255
 740:	d9 f4       	brne	.+54     	; 0x778 <main+0x1d8>
		{	
			FlashLED(2, 2, 1);
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	ba dc       	rcall	.-1676   	; 0xbe <FlashLED>
			Key1Pressed = 0;
 74a:	10 92 69 00 	sts	0x0069, r1
			do {
				__asm__ volatile ("" ::: "memory"); // Need memory barrier
				Delay100ms(1);
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	a7 dc       	rcall	.-1714   	; 0xa2 <Delay100ms>
				if(Key1Pressed == 255) break;
 754:	80 91 69 00 	lds	r24, 0x0069
 758:	8f 3f       	cpi	r24, 0xFF	; 255
 75a:	09 f4       	brne	.+2      	; 0x75e <main+0x1be>
 75c:	b1 c0       	rjmp	.+354    	; 0x8c0 <main+0x320>
			} while(KEY1_PRESSING);
 75e:	b2 9b       	sbis	0x16, 2	; 22
 760:	f6 cf       	rjmp	.-20     	; 0x74e <main+0x1ae>
			if(Key1Pressed != 255) {
				uint8_t i;
				EEPROM_write(EPROM_FanOffAtNight, (i = EEPROM_read(EPROM_FanOffAtNight) ^ 1));
 762:	8c e0       	ldi	r24, 0x0C	; 12
 764:	81 dc       	rcall	.-1790   	; 0x68 <EEPROM_read>
 766:	18 2f       	mov	r17, r24
 768:	10 27       	eor	r17, r16
 76a:	61 2f       	mov	r22, r17
 76c:	8c e0       	ldi	r24, 0x0C	; 12
 76e:	84 dc       	rcall	.-1784   	; 0x78 <EEPROM_write>
				FlashLED(i, 10, 10);
 770:	4a e0       	ldi	r20, 0x0A	; 10
 772:	6a e0       	ldi	r22, 0x0A	; 10
 774:	81 2f       	mov	r24, r17
 776:	9c c0       	rjmp	.+312    	; 0x8b0 <main+0x310>
				}
			}
xSetupExit:	IRReceived = 0;
			Key1Pressed = 0;
			SetupIR = 0;
		} else if(Key1Pressed >= KEY1_PressingTimeMin && !KEY1_PRESSING) { // Key is released
 778:	8a 30       	cpi	r24, 0x0A	; 10
 77a:	c0 f0       	brcs	.+48     	; 0x7ac <main+0x20c>
 77c:	b2 9b       	sbis	0x16, 2	; 22
 77e:	16 c0       	rjmp	.+44     	; 0x7ac <main+0x20c>
			FanSpeedOverride = 1;
 780:	00 93 6f 00 	sts	0x006F, r16
			if(++FanSpeed > FanSpeedMax) FanSpeed = 0;
 784:	80 91 70 00 	lds	r24, 0x0070
 788:	8f 5f       	subi	r24, 0xFF	; 255
 78a:	80 93 70 00 	sts	0x0070, r24
 78e:	90 91 71 00 	lds	r25, 0x0071
 792:	98 17       	cp	r25, r24
 794:	10 f4       	brcc	.+4      	; 0x79a <main+0x1fa>
 796:	10 92 70 00 	sts	0x0070, r1
			EEPROM_write(EPROM_FanSpeedInit, FanSpeed);
 79a:	60 91 70 00 	lds	r22, 0x0070
 79e:	87 e0       	ldi	r24, 0x07	; 7
 7a0:	6b dc       	rcall	.-1834   	; 0x78 <EEPROM_write>
			Key1Pressed = 0;
 7a2:	10 92 69 00 	sts	0x0069, r1
			SetFanSpeed(FanSpeed);
 7a6:	80 91 70 00 	lds	r24, 0x0070
 7aa:	b6 de       	rcall	.-660    	; 0x518 <SetFanSpeed>
		}
		if(NRF24_Receive(NRF24_Buffer)) {
 7ac:	88 e7       	ldi	r24, 0x78	; 120
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	10 dd       	rcall	.-1504   	; 0x1d2 <NRF24_Receive>
 7b2:	88 23       	and	r24, r24
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <main+0x218>
 7b6:	5d c0       	rjmp	.+186    	; 0x872 <main+0x2d2>
			if(FanSpeedOverride == 0) {
 7b8:	80 91 6f 00 	lds	r24, 0x006F
 7bc:	81 11       	cpse	r24, r1
 7be:	33 c0       	rjmp	.+102    	; 0x826 <main+0x286>
				FanSpeed = (((send_data*) &NRF24_Buffer)->FanSpeed) / EEPROM_read(EPROM_FanSpeedDivider);
 7c0:	10 91 7a 00 	lds	r17, 0x007A
 7c4:	85 e0       	ldi	r24, 0x05	; 5
 7c6:	50 dc       	rcall	.-1888   	; 0x68 <EEPROM_read>
 7c8:	68 2f       	mov	r22, r24
 7ca:	81 2f       	mov	r24, r17
 7cc:	53 d1       	rcall	.+678    	; 0xa74 <__udivmodqi4>
 7ce:	80 93 70 00 	sts	0x0070, r24
				if(EEPROM_read(EPROM_FanOffAtNight)) {
 7d2:	8c e0       	ldi	r24, 0x0C	; 12
 7d4:	49 dc       	rcall	.-1902   	; 0x68 <EEPROM_read>
 7d6:	88 23       	and	r24, r24
 7d8:	d9 f0       	breq	.+54     	; 0x810 <main+0x270>
					uint8_t lt = ((send_data*) &NRF24_Buffer)->Flags & FLAG_LowLight;
 7da:	10 91 7b 00 	lds	r17, 0x007B
 7de:	11 70       	andi	r17, 0x01	; 1
					if(lt != LowLightLast && TimerLowLight < EEPROM_read(EPROM_TimeLightToChange)) {
 7e0:	80 91 65 00 	lds	r24, 0x0065
 7e4:	18 17       	cp	r17, r24
 7e6:	41 f0       	breq	.+16     	; 0x7f8 <main+0x258>
 7e8:	f0 90 60 00 	lds	r15, 0x0060
 7ec:	8d e0       	ldi	r24, 0x0D	; 13
 7ee:	3c dc       	rcall	.-1928   	; 0x68 <EEPROM_read>
 7f0:	f8 16       	cp	r15, r24
 7f2:	10 f4       	brcc	.+4      	; 0x7f8 <main+0x258>
						lt = LowLightLast;
 7f4:	10 91 65 00 	lds	r17, 0x0065
					}
					LowLightLast = lt;
 7f8:	10 93 65 00 	sts	0x0065, r17
					TimerLowLight = 0;
 7fc:	10 92 60 00 	sts	0x0060, r1
					if(lt) {
 800:	11 23       	and	r17, r17
 802:	31 f0       	breq	.+12     	; 0x810 <main+0x270>
						FanSpeed = 0;
 804:	10 92 70 00 	sts	0x0070, r1
						FlashLED(1,1,1);
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	61 e0       	ldi	r22, 0x01	; 1
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	57 dc       	rcall	.-1874   	; 0xbe <FlashLED>
					}
				}
				uint8_t i = EEPROM_read(EPROM_ReceivedFanSpeedMin);
 810:	89 e0       	ldi	r24, 0x09	; 9
 812:	2a dc       	rcall	.-1964   	; 0x68 <EEPROM_read>
				if(FanSpeed < i) FanSpeed = i;
 814:	90 91 70 00 	lds	r25, 0x0070
 818:	98 17       	cp	r25, r24
 81a:	10 f4       	brcc	.+4      	; 0x820 <main+0x280>
 81c:	80 93 70 00 	sts	0x0070, r24
				SetFanSpeed(FanSpeed);
 820:	80 91 70 00 	lds	r24, 0x0070
 824:	79 de       	rcall	.-782    	; 0x518 <SetFanSpeed>
			}
			uint8_t addrs = EEPROM_read(EPROM_Retranslate);
 826:	80 e2       	ldi	r24, 0x20	; 32
 828:	1f dc       	rcall	.-1986   	; 0x68 <EEPROM_read>
 82a:	f8 2e       	mov	r15, r24
			if(addrs) {
 82c:	88 23       	and	r24, r24
 82e:	09 f1       	breq	.+66     	; 0x872 <main+0x2d2>
				Delay10us(50);
 830:	82 e3       	ldi	r24, 0x32	; 50
 832:	2e dc       	rcall	.-1956   	; 0x90 <Delay10us>
				NRF24_SetMode(NRF24_TransmitMode);
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	bf dc       	rcall	.-1666   	; 0x1b6 <NRF24_SetMode>
				for(uint8_t i = 0; i < addrs; i++) {
 838:	10 e0       	ldi	r17, 0x00	; 0
					if(NRF24_SetAddresses(EEPROM_read(EPROM_RetranslateRFAddr + i))) {
 83a:	81 e2       	ldi	r24, 0x21	; 33
 83c:	81 0f       	add	r24, r17
 83e:	14 dc       	rcall	.-2008   	; 0x68 <EEPROM_read>
 840:	03 dd       	rcall	.-1530   	; 0x248 <NRF24_SetAddresses>
 842:	1f 5f       	subi	r17, 0xFF	; 255
 844:	88 23       	and	r24, r24
 846:	91 f0       	breq	.+36     	; 0x86c <main+0x2cc>
						uint8_t err = NRF24_Transmit(NRF24_Buffer);
 848:	88 e7       	ldi	r24, 0x78	; 120
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	dc dc       	rcall	.-1608   	; 0x206 <NRF24_Transmit>
						if(err && (LED_mode & 0b100)) {
 84e:	88 23       	and	r24, r24
 850:	69 f0       	breq	.+26     	; 0x86c <main+0x2cc>
 852:	90 91 73 00 	lds	r25, 0x0073
 856:	92 ff       	sbrs	r25, 2
 858:	09 c0       	rjmp	.+18     	; 0x86c <main+0x2cc>
							LED_Warning = 0;
 85a:	10 92 64 00 	sts	0x0064, r1
							FlashLED(err, 5, 10);
 85e:	4a e0       	ldi	r20, 0x0A	; 10
 860:	65 e0       	ldi	r22, 0x05	; 5
 862:	2d dc       	rcall	.-1958   	; 0xbe <FlashLED>
							FlashLED(i + 1, 2, 2);
 864:	42 e0       	ldi	r20, 0x02	; 2
 866:	62 e0       	ldi	r22, 0x02	; 2
 868:	81 2f       	mov	r24, r17
 86a:	29 dc       	rcall	.-1966   	; 0xbe <FlashLED>
			}
			uint8_t addrs = EEPROM_read(EPROM_Retranslate);
			if(addrs) {
				Delay10us(50);
				NRF24_SetMode(NRF24_TransmitMode);
				for(uint8_t i = 0; i < addrs; i++) {
 86c:	1f 11       	cpse	r17, r15
 86e:	e5 cf       	rjmp	.-54     	; 0x83a <main+0x29a>
 870:	fb ce       	rjmp	.-522    	; 0x668 <main+0xc8>
					}
				}
				goto xStartReceiving;
			}
		}
		if(LED_WarningOnCnt == 0 && LED_WarningOffCnt == 0 && LED_Warning == 0 && LED_mode & 0b010) {
 872:	80 91 63 00 	lds	r24, 0x0063
 876:	81 11       	cpse	r24, r1
 878:	04 cf       	rjmp	.-504    	; 0x682 <main+0xe2>
 87a:	80 91 62 00 	lds	r24, 0x0062
 87e:	81 11       	cpse	r24, r1
 880:	00 cf       	rjmp	.-512    	; 0x682 <main+0xe2>
 882:	80 91 64 00 	lds	r24, 0x0064
 886:	81 11       	cpse	r24, r1
 888:	fc ce       	rjmp	.-520    	; 0x682 <main+0xe2>
 88a:	80 91 73 00 	lds	r24, 0x0073
 88e:	81 ff       	sbrs	r24, 1
 890:	f8 ce       	rjmp	.-528    	; 0x682 <main+0xe2>
			// Led turned on if endless override, flashing every 1 sec if override timeout active
			if(FanSpeedOverride && ((uint8_t) FanSpeedOverrideTimer & 8) == 0) LED1_ON; else LED1_OFF;
 892:	80 91 6f 00 	lds	r24, 0x006F
 896:	88 23       	and	r24, r24
 898:	31 f0       	breq	.+12     	; 0x8a6 <main+0x306>
 89a:	80 91 6d 00 	lds	r24, 0x006D
 89e:	83 fd       	sbrc	r24, 3
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <main+0x306>
 8a2:	d9 9a       	sbi	0x1b, 1	; 27
 8a4:	ee ce       	rjmp	.-548    	; 0x682 <main+0xe2>
 8a6:	d9 98       	cbi	0x1b, 1	; 27
 8a8:	ec ce       	rjmp	.-552    	; 0x682 <main+0xe2>
xSetupIR:						FlashLED(7, 1, 1);
								Delay100ms(10);
								IRReceived = 0;
								Timer = 255;
							} else {
								FlashLED(8, 1, 1);
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	88 e0       	ldi	r24, 0x08	; 8
				if(Key1Pressed == 255) break;
			} while(KEY1_PRESSING);
			if(Key1Pressed != 255) {
				uint8_t i;
				EEPROM_write(EPROM_FanOffAtNight, (i = EEPROM_read(EPROM_FanOffAtNight) ^ 1));
				FlashLED(i, 10, 10);
 8b0:	06 dc       	rcall	.-2036   	; 0xbe <FlashLED>
							}
						}
					} while(Timer);
				}
			}
xSetupExit:	IRReceived = 0;
 8b2:	10 92 6b 00 	sts	0x006B, r1
			Key1Pressed = 0;
 8b6:	10 92 69 00 	sts	0x0069, r1
			SetupIR = 0;
 8ba:	10 92 68 00 	sts	0x0068, r1
 8be:	76 cf       	rjmp	.-276    	; 0x7ac <main+0x20c>
				FlashLED(i, 10, 10);
			} else { // Press and hold key1 for ~3.2 sec - Enter setup
				// Setup:
				// 1. Set Zero PWM, Max PWM, Retranslate on/off, remote setup
				// Short press "+", long press "-"
				FanSpeedOverride = 0;
 8c0:	10 92 6f 00 	sts	0x006F, r1
				if(FanType == 0) { // PWM fan
 8c4:	80 91 76 00 	lds	r24, 0x0076
 8c8:	81 11       	cpse	r24, r1
 8ca:	10 c0       	rjmp	.+32     	; 0x8ec <main+0x34c>
					FlashLED(3, 2, 1);
 8cc:	41 e0       	ldi	r20, 0x01	; 1
 8ce:	62 e0       	ldi	r22, 0x02	; 2
 8d0:	83 e0       	ldi	r24, 0x03	; 3
 8d2:	f5 db       	rcall	.-2070   	; 0xbe <FlashLED>
					Key1Pressed = 0;
 8d4:	10 92 69 00 	sts	0x0069, r1
					do {
						__asm__ volatile ("" ::: "memory"); // Need memory barrier
						Delay100ms(1);
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	e2 db       	rcall	.-2108   	; 0xa2 <Delay100ms>
						if(Key1Pressed == 255) break;
 8de:	80 91 69 00 	lds	r24, 0x0069
 8e2:	8f 3f       	cpi	r24, 0xFF	; 255
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <main+0x348>
 8e6:	43 c0       	rjmp	.+134    	; 0x96e <main+0x3ce>
					} while(KEY1_PRESSING);
 8e8:	b2 9b       	sbis	0x16, 2	; 22
 8ea:	f6 cf       	rjmp	.-20     	; 0x8d8 <main+0x338>
						FlashLED(7, 1, 1);
						EEPROM_write(Setup ? EPROM_PWM_MAX_Minus_1 : EPROM_PWM_Zero, FanPWM);
						goto xSetupExit;
					}
				}
				if(IRHead) {
 8ec:	80 91 6a 00 	lds	r24, 0x006A
 8f0:	88 23       	and	r24, r24
 8f2:	f9 f2       	breq	.-66     	; 0x8b2 <main+0x312>
					SetupIR = 1;
 8f4:	00 93 68 00 	sts	0x0068, r16
							if(SetupIR == 1) EEPROM_write(EPROM_IRCommandHead - 1 + SetupIR, IRHead);					
							EEPROM_write(EPROM_IRCommandArray + (SetupIR-1) * sizeof(IRHash), (uint8_t) (IRHash % 256));
							EEPROM_write(EPROM_IRCommandArray + (SetupIR-1) * sizeof(IRHash) + 1, (uint8_t) (IRHash / 256));
							if(SetupIR < IRCommands) {
								SetupIR++;
xSetupIR:						FlashLED(7, 1, 1);
 8f8:	41 e0       	ldi	r20, 0x01	; 1
 8fa:	61 e0       	ldi	r22, 0x01	; 1
 8fc:	87 e0       	ldi	r24, 0x07	; 7
 8fe:	df db       	rcall	.-2114   	; 0xbe <FlashLED>
								Delay100ms(10);
 900:	8a e0       	ldi	r24, 0x0A	; 10
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	ce db       	rcall	.-2148   	; 0xa2 <Delay100ms>
								IRReceived = 0;
 906:	10 92 6b 00 	sts	0x006B, r1
								Timer = 255;
 90a:	e0 92 67 00 	sts	0x0067, r14
							} else {
								FlashLED(8, 1, 1);
								break;
							}
						}
					} while(Timer);
 90e:	80 91 67 00 	lds	r24, 0x0067
 912:	88 23       	and	r24, r24
 914:	71 f2       	breq	.-100    	; 0x8b2 <main+0x312>
				if(IRHead) {
					SetupIR = 1;
					goto xSetupIR;
					do {
						__asm__ volatile ("" ::: "memory"); // Need memory barrier
						sleep_cpu();
 916:	88 95       	sleep
						if(LED_Warning == 0) LED_Warning = SetupIR;
 918:	80 91 64 00 	lds	r24, 0x0064
 91c:	81 11       	cpse	r24, r1
 91e:	04 c0       	rjmp	.+8      	; 0x928 <main+0x388>
 920:	80 91 68 00 	lds	r24, 0x0068
 924:	80 93 64 00 	sts	0x0064, r24
						if(IRReceived == IRIsCommandReceived) {
 928:	80 91 6b 00 	lds	r24, 0x006B
 92c:	83 30       	cpi	r24, 0x03	; 3
 92e:	79 f7       	brne	.-34     	; 0x90e <main+0x36e>
							if(SetupIR == 1) EEPROM_write(EPROM_IRCommandHead - 1 + SetupIR, IRHead);					
 930:	80 91 68 00 	lds	r24, 0x0068
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	21 f4       	brne	.+8      	; 0x940 <main+0x3a0>
 938:	60 91 6a 00 	lds	r22, 0x006A
 93c:	80 e1       	ldi	r24, 0x10	; 16
 93e:	9c db       	rcall	.-2248   	; 0x78 <EEPROM_write>
							EEPROM_write(EPROM_IRCommandArray + (SetupIR-1) * sizeof(IRHash), (uint8_t) (IRHash % 256));
 940:	80 91 68 00 	lds	r24, 0x0068
 944:	88 0f       	add	r24, r24
 946:	60 91 74 00 	lds	r22, 0x0074
 94a:	81 5f       	subi	r24, 0xF1	; 241
 94c:	95 db       	rcall	.-2262   	; 0x78 <EEPROM_write>
							EEPROM_write(EPROM_IRCommandArray + (SetupIR-1) * sizeof(IRHash) + 1, (uint8_t) (IRHash / 256));
 94e:	60 91 75 00 	lds	r22, 0x0075
 952:	80 91 68 00 	lds	r24, 0x0068
 956:	88 0f       	add	r24, r24
 958:	80 5f       	subi	r24, 0xF0	; 240
 95a:	8e db       	rcall	.-2276   	; 0x78 <EEPROM_write>
							if(SetupIR < IRCommands) {
 95c:	80 91 68 00 	lds	r24, 0x0068
 960:	83 30       	cpi	r24, 0x03	; 3
 962:	08 f0       	brcs	.+2      	; 0x966 <main+0x3c6>
 964:	a2 cf       	rjmp	.-188    	; 0x8aa <main+0x30a>
								SetupIR++;
 966:	8f 5f       	subi	r24, 0xFF	; 255
 968:	80 93 68 00 	sts	0x0068, r24
 96c:	c5 cf       	rjmp	.-118    	; 0x8f8 <main+0x358>
						__asm__ volatile ("" ::: "memory"); // Need memory barrier
						Delay100ms(1);
						if(Key1Pressed == 255) break;
					} while(KEY1_PRESSING);
					if(Key1Pressed == 255) { // >= ~3.2 sec
						FlashLED(4, 2, 1);
 96e:	41 e0       	ldi	r20, 0x01	; 1
 970:	62 e0       	ldi	r22, 0x02	; 2
 972:	84 e0       	ldi	r24, 0x04	; 4
 974:	a4 db       	rcall	.-2232   	; 0xbe <FlashLED>
						uint8_t Setup = 0;
						Key1Pressed = 0;
 976:	10 92 69 00 	sts	0x0069, r1
						do { Delay100ms(1); } while(KEY1_PRESSING);
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	91 db       	rcall	.-2270   	; 0xa2 <Delay100ms>
 980:	b2 9b       	sbis	0x16, 2	; 22
 982:	fb cf       	rjmp	.-10     	; 0x97a <main+0x3da>
						if(Key1Pressed == 255) { // >= ~3.2 sec
 984:	80 91 69 00 	lds	r24, 0x0069
 988:	8f 3f       	cpi	r24, 0xFF	; 255
 98a:	41 f4       	brne	.+16     	; 0x99c <main+0x3fc>
							FlashLED(5, 2, 1);
 98c:	41 e0       	ldi	r20, 0x01	; 1
 98e:	62 e0       	ldi	r22, 0x02	; 2
 990:	85 e0       	ldi	r24, 0x05	; 5
 992:	95 db       	rcall	.-2262   	; 0xbe <FlashLED>
							Setup = 1;
 994:	ff 24       	eor	r15, r15
 996:	f3 94       	inc	r15
						}
						FanPWM = EEPROM_read(Setup ? EPROM_PWM_MAX_Minus_1 : EPROM_PWM_Zero);
 998:	8e e0       	ldi	r24, 0x0E	; 14
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <main+0x400>
						Delay100ms(1);
						if(Key1Pressed == 255) break;
					} while(KEY1_PRESSING);
					if(Key1Pressed == 255) { // >= ~3.2 sec
						FlashLED(4, 2, 1);
						uint8_t Setup = 0;
 99c:	f1 2c       	mov	r15, r1
						do { Delay100ms(1); } while(KEY1_PRESSING);
						if(Key1Pressed == 255) { // >= ~3.2 sec
							FlashLED(5, 2, 1);
							Setup = 1;
						}
						FanPWM = EEPROM_read(Setup ? EPROM_PWM_MAX_Minus_1 : EPROM_PWM_Zero);
 99e:	84 e0       	ldi	r24, 0x04	; 4
 9a0:	63 db       	rcall	.-2362   	; 0x68 <EEPROM_read>
 9a2:	8c bf       	out	0x3c, r24	; 60
										}
									} else if(FanPWM > 0) {
										FanPWM--;
										FlashLED(2, 1, 1);
									}
xSetupPWMZero:						Key1Pressed = 0;
 9a4:	10 92 69 00 	sts	0x0069, r1
									Timer = 255;
 9a8:	e0 92 67 00 	sts	0x0067, r14
								}
							}
						} while(Timer);
 9ac:	80 91 67 00 	lds	r24, 0x0067
 9b0:	88 23       	and	r24, r24
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <main+0x416>
 9b4:	42 c0       	rjmp	.+132    	; 0xa3a <main+0x49a>
						}
						FanPWM = EEPROM_read(Setup ? EPROM_PWM_MAX_Minus_1 : EPROM_PWM_Zero);
						goto xSetupPWMZero;
						do {
							__asm__ volatile ("" ::: "memory"); // Need memory barrier
							sleep_cpu();
 9b6:	88 95       	sleep
							if(!KEY1_PRESSING) {
 9b8:	b2 9b       	sbis	0x16, 2	; 22
 9ba:	f8 cf       	rjmp	.-16     	; 0x9ac <main+0x40c>
								if(Key1Pressed > 1) { 
 9bc:	80 91 69 00 	lds	r24, 0x0069
 9c0:	82 30       	cpi	r24, 0x02	; 2
 9c2:	a0 f3       	brcs	.-24     	; 0x9ac <main+0x40c>
									if(Key1Pressed == 255) { // Set retranslate
 9c4:	8f 3f       	cpi	r24, 0xFF	; 255
 9c6:	09 f5       	brne	.+66     	; 0xa0a <main+0x46a>
										FlashLED(6, 2, 1);
 9c8:	41 e0       	ldi	r20, 0x01	; 1
 9ca:	62 e0       	ldi	r22, 0x02	; 2
 9cc:	86 e0       	ldi	r24, 0x06	; 6
 9ce:	77 db       	rcall	.-2322   	; 0xbe <FlashLED>
										Key1Pressed = 0;
 9d0:	10 92 69 00 	sts	0x0069, r1
										do { Delay100ms(1); } while(KEY1_PRESSING);
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	64 db       	rcall	.-2360   	; 0xa2 <Delay100ms>
 9da:	b2 9b       	sbis	0x16, 2	; 22
 9dc:	fb cf       	rjmp	.-10     	; 0x9d4 <main+0x434>
										if(Key1Pressed == 255) { // 2 times more 3 sec
 9de:	80 91 69 00 	lds	r24, 0x0069
 9e2:	8f 3f       	cpi	r24, 0xFF	; 255
 9e4:	f9 f6       	brne	.-66     	; 0x9a4 <main+0x404>
											uint8_t i;
											if((i = EEPROM_read(EPROM_Retranslate) + 1) > 2) i = 0; // Max retranslate cnt
 9e6:	80 e2       	ldi	r24, 0x20	; 32
 9e8:	3f db       	rcall	.-2434   	; 0x68 <EEPROM_read>
 9ea:	11 e0       	ldi	r17, 0x01	; 1
 9ec:	18 0f       	add	r17, r24
 9ee:	13 30       	cpi	r17, 0x03	; 3
 9f0:	08 f0       	brcs	.+2      	; 0x9f4 <main+0x454>
 9f2:	10 e0       	ldi	r17, 0x00	; 0
											EEPROM_write(EPROM_Retranslate, i);
 9f4:	61 2f       	mov	r22, r17
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	3f db       	rcall	.-2434   	; 0x78 <EEPROM_write>
											FlashLED(i, 10, 10);
 9fa:	4a e0       	ldi	r20, 0x0A	; 10
 9fc:	6a e0       	ldi	r22, 0x0A	; 10
 9fe:	81 2f       	mov	r24, r17
 a00:	5e db       	rcall	.-2372   	; 0xbe <FlashLED>
											Delay100ms(10);
 a02:	8a e0       	ldi	r24, 0x0A	; 10
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	4d db       	rcall	.-2406   	; 0xa2 <Delay100ms>
 a08:	cd cf       	rjmp	.-102    	; 0x9a4 <main+0x404>
										}
										goto xSetupPWMZero;
									}
									if(Key1Pressed < 80) { // ~ 1 sec
 a0a:	80 35       	cpi	r24, 0x50	; 80
 a0c:	50 f4       	brcc	.+20     	; 0xa22 <main+0x482>
										if(FanPWM < PWM_MAX) {
 a0e:	8c b7       	in	r24, 0x3c	; 60
 a10:	82 33       	cpi	r24, 0x32	; 50
 a12:	40 f6       	brcc	.-112    	; 0x9a4 <main+0x404>
											FanPWM++;
 a14:	8c b7       	in	r24, 0x3c	; 60
 a16:	8f 5f       	subi	r24, 0xFF	; 255
 a18:	8c bf       	out	0x3c, r24	; 60
											FlashLED(1, 1, 1);
 a1a:	41 e0       	ldi	r20, 0x01	; 1
 a1c:	61 e0       	ldi	r22, 0x01	; 1
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	0a c0       	rjmp	.+20     	; 0xa36 <main+0x496>
										}
									} else if(FanPWM > 0) {
 a22:	8c b7       	in	r24, 0x3c	; 60
 a24:	88 23       	and	r24, r24
 a26:	09 f4       	brne	.+2      	; 0xa2a <main+0x48a>
 a28:	bd cf       	rjmp	.-134    	; 0x9a4 <main+0x404>
										FanPWM--;
 a2a:	8c b7       	in	r24, 0x3c	; 60
 a2c:	81 50       	subi	r24, 0x01	; 1
 a2e:	8c bf       	out	0x3c, r24	; 60
										FlashLED(2, 1, 1);
 a30:	41 e0       	ldi	r20, 0x01	; 1
 a32:	61 e0       	ldi	r22, 0x01	; 1
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	43 db       	rcall	.-2426   	; 0xbe <FlashLED>
 a38:	b5 cf       	rjmp	.-150    	; 0x9a4 <main+0x404>
xSetupPWMZero:						Key1Pressed = 0;
									Timer = 255;
								}
							}
						} while(Timer);
						FlashLED(7, 1, 1);
 a3a:	41 e0       	ldi	r20, 0x01	; 1
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	87 e0       	ldi	r24, 0x07	; 7
 a40:	3e db       	rcall	.-2436   	; 0xbe <FlashLED>
						EEPROM_write(Setup ? EPROM_PWM_MAX_Minus_1 : EPROM_PWM_Zero, FanPWM);
 a42:	6c b7       	in	r22, 0x3c	; 60
 a44:	ff 20       	and	r15, r15
 a46:	11 f0       	breq	.+4      	; 0xa4c <main+0x4ac>
 a48:	8e e0       	ldi	r24, 0x0E	; 14
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <main+0x4ae>
 a4c:	84 e0       	ldi	r24, 0x04	; 4
 a4e:	14 db       	rcall	.-2520   	; 0x78 <EEPROM_write>
						goto xSetupExit;
 a50:	30 cf       	rjmp	.-416    	; 0x8b2 <main+0x312>

00000a52 <__mulhi3>:
 a52:	00 24       	eor	r0, r0
 a54:	55 27       	eor	r21, r21
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <__mulhi3+0xe>
 a58:	08 0e       	add	r0, r24
 a5a:	59 1f       	adc	r21, r25
 a5c:	88 0f       	add	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	00 97       	sbiw	r24, 0x00	; 0
 a62:	29 f0       	breq	.+10     	; 0xa6e <__mulhi3+0x1c>
 a64:	76 95       	lsr	r23
 a66:	67 95       	ror	r22
 a68:	b8 f3       	brcs	.-18     	; 0xa58 <__mulhi3+0x6>
 a6a:	71 05       	cpc	r23, r1
 a6c:	b9 f7       	brne	.-18     	; 0xa5c <__mulhi3+0xa>
 a6e:	80 2d       	mov	r24, r0
 a70:	95 2f       	mov	r25, r21
 a72:	08 95       	ret

00000a74 <__udivmodqi4>:
 a74:	99 1b       	sub	r25, r25
 a76:	79 e0       	ldi	r23, 0x09	; 9
 a78:	04 c0       	rjmp	.+8      	; 0xa82 <__udivmodqi4_ep>

00000a7a <__udivmodqi4_loop>:
 a7a:	99 1f       	adc	r25, r25
 a7c:	96 17       	cp	r25, r22
 a7e:	08 f0       	brcs	.+2      	; 0xa82 <__udivmodqi4_ep>
 a80:	96 1b       	sub	r25, r22

00000a82 <__udivmodqi4_ep>:
 a82:	88 1f       	adc	r24, r24
 a84:	7a 95       	dec	r23
 a86:	c9 f7       	brne	.-14     	; 0xa7a <__udivmodqi4_loop>
 a88:	80 95       	com	r24
 a8a:	08 95       	ret

00000a8c <__divmodhi4>:
 a8c:	97 fb       	bst	r25, 7
 a8e:	07 2e       	mov	r0, r23
 a90:	16 f4       	brtc	.+4      	; 0xa96 <__divmodhi4+0xa>
 a92:	00 94       	com	r0
 a94:	06 d0       	rcall	.+12     	; 0xaa2 <__divmodhi4_neg1>
 a96:	77 fd       	sbrc	r23, 7
 a98:	08 d0       	rcall	.+16     	; 0xaaa <__divmodhi4_neg2>
 a9a:	0b d0       	rcall	.+22     	; 0xab2 <__udivmodhi4>
 a9c:	07 fc       	sbrc	r0, 7
 a9e:	05 d0       	rcall	.+10     	; 0xaaa <__divmodhi4_neg2>
 aa0:	3e f4       	brtc	.+14     	; 0xab0 <__divmodhi4_exit>

00000aa2 <__divmodhi4_neg1>:
 aa2:	90 95       	com	r25
 aa4:	81 95       	neg	r24
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__divmodhi4_neg2>:
 aaa:	70 95       	com	r23
 aac:	61 95       	neg	r22
 aae:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab0 <__divmodhi4_exit>:
 ab0:	08 95       	ret

00000ab2 <__udivmodhi4>:
 ab2:	aa 1b       	sub	r26, r26
 ab4:	bb 1b       	sub	r27, r27
 ab6:	51 e1       	ldi	r21, 0x11	; 17
 ab8:	07 c0       	rjmp	.+14     	; 0xac8 <__udivmodhi4_ep>

00000aba <__udivmodhi4_loop>:
 aba:	aa 1f       	adc	r26, r26
 abc:	bb 1f       	adc	r27, r27
 abe:	a6 17       	cp	r26, r22
 ac0:	b7 07       	cpc	r27, r23
 ac2:	10 f0       	brcs	.+4      	; 0xac8 <__udivmodhi4_ep>
 ac4:	a6 1b       	sub	r26, r22
 ac6:	b7 0b       	sbc	r27, r23

00000ac8 <__udivmodhi4_ep>:
 ac8:	88 1f       	adc	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	5a 95       	dec	r21
 ace:	a9 f7       	brne	.-22     	; 0xaba <__udivmodhi4_loop>
 ad0:	80 95       	com	r24
 ad2:	90 95       	com	r25
 ad4:	bc 01       	movw	r22, r24
 ad6:	cd 01       	movw	r24, r26
 ad8:	08 95       	ret

00000ada <memcpy_P>:
 ada:	fb 01       	movw	r30, r22
 adc:	dc 01       	movw	r26, r24
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <memcpy_P+0xa>
 ae0:	05 90       	lpm	r0, Z+
 ae2:	0d 92       	st	X+, r0
 ae4:	41 50       	subi	r20, 0x01	; 1
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	d8 f7       	brcc	.-10     	; 0xae0 <memcpy_P+0x6>
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
